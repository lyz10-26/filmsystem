import { camelize, capitalize, extend, hasOwn, isArray, isObject, isString, looseEqual } from '@vue/shared';
import type { ComponentPublicInstance, CSSProperties, Ref } from 'vue';
import type { AnyFunction, TimeoutHandle, Nullable } from './types';
export declare const SCOPE = "Util";
export declare function toObject<T>(arr: Array<T>): Record<string, T>;
export declare const getValueByPath: (obj: any, paths?: string) => unknown;
export declare function getPropByPath(obj: any, path: string, strict: boolean): {
    o: unknown;
    k: string;
    v: Nullable<unknown>;
};
export declare const generateId: () => number;
export declare const escapeRegexpString: (value?: string) => string;
export declare const coerceTruthyValueToArray: (arr: any) => any[];
export declare const isFirefox: () => boolean;
export declare const autoprefixer: (style: CSSProperties) => CSSProperties;
export declare const kebabCase: (str: string) => string;
export { isVNode } from 'vue';
export { hasOwn, isObject, isArray, isString, capitalize, camelize, looseEqual, extend, };
export declare const isBool: (val: unknown) => val is boolean;
export declare const isNumber: (val: unknown) => val is number;
export declare const isHTMLElement: (val: unknown) => boolean;
export declare function rafThrottle<T extends AnyFunction<any>>(fn: T): AnyFunction<void>;
export declare const clearTimer: (timer: Ref<TimeoutHandle>) => void;
export declare function getRandomInt(max: number): number;
export declare function isUndefined(val: any): val is undefined;
export declare function useGlobalConfig(): any;
export declare function isEmpty(val: unknown): boolean;
export declare function arrayFlat(arr: unknown[]): any;
export declare function deduplicate<T>(arr: T[]): T[];
export declare function $<T>(ref: Ref<T>): T;
export declare function addUnit(value: string | number): string;
export declare function isEqualWithFunction(obj: any, other: any): boolean;
export declare const refAttacher: <T extends HTMLElement | ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>(ref: Ref<T>) => (val: T) => void;
