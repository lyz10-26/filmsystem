import type { PropType } from 'vue';
import type { ComponentSize } from 'element-plus/es/utils/types';
declare type AutosizeProp = {
    minRows?: number;
    maxRows?: number;
} | boolean;
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<ComponentSize>;
        validator: (val: string) => boolean;
    };
    resize: {
        type: PropType<"none" | "both" | "horizontal" | "vertical">;
        validator: (val: string) => boolean;
    };
    autosize: {
        type: PropType<AutosizeProp>;
        default: AutosizeProp;
    };
    autocomplete: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
    };
    form: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPassword: {
        type: BooleanConstructor;
        default: boolean;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    suffixIcon: {
        type: StringConstructor;
        default: string;
    };
    prefixIcon: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
    };
    tabindex: {
        type: (NumberConstructor | StringConstructor)[];
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    maxlength: {
        type: (NumberConstructor | StringConstructor)[];
    };
}, {
    input: import("vue").Ref<null>;
    textarea: import("vue").Ref<null>;
    attrs: import("vue").ComputedRef<Record<string, unknown>>;
    inputSize: import("vue").ComputedRef<any>;
    validateState: import("vue").ComputedRef<string>;
    validateIcon: import("vue").ComputedRef<any>;
    computedTextareaStyle: import("vue").ComputedRef<{
        resize: "none" | "both" | "horizontal" | "vertical" | undefined;
    }>;
    resizeTextarea: () => void;
    inputDisabled: import("vue").ComputedRef<boolean | undefined>;
    showClear: import("vue").ComputedRef<boolean | "">;
    showPwdVisible: import("vue").ComputedRef<boolean>;
    isWordLimitVisible: import("vue").ComputedRef<boolean | "" | 0 | undefined>;
    textLength: import("vue").ComputedRef<number>;
    hovering: import("vue").Ref<boolean>;
    inputExceed: import("vue").ComputedRef<boolean | "" | 0 | undefined>;
    passwordVisible: import("vue").Ref<boolean>;
    inputOrTextarea: import("vue").ComputedRef<null>;
    handleInput: (event: any) => void;
    handleChange: (event: any) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    handleCompositionStart: (event: CompositionEvent) => void;
    handleCompositionUpdate: (event: CompositionEvent) => void;
    handleCompositionEnd: (event: CompositionEvent) => void;
    handlePasswordVisible: () => void;
    clear: () => void;
    select: () => void;
    focus: () => void;
    blur: () => void;
    getSuffixVisible: () => string | boolean | import("vue").Slot | undefined;
    onMouseLeave: (e: any) => void;
    onMouseEnter: (e: any) => void;
    handleKeydown: (e: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "update:modelValue" | "input" | "change" | "blur" | "clear" | "mouseleave" | "mouseenter" | "keydown" | "compositionstart" | "compositionupdate" | "compositionend")[], "change" | "focus" | "update:modelValue" | "input" | "blur" | "clear" | "mouseleave" | "mouseenter" | "keydown" | "compositionstart" | "compositionupdate" | "compositionend", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    type?: unknown;
    size?: unknown;
    resize?: unknown;
    autosize?: unknown;
    autocomplete?: unknown;
    placeholder?: unknown;
    form?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    clearable?: unknown;
    showPassword?: unknown;
    showWordLimit?: unknown;
    suffixIcon?: unknown;
    prefixIcon?: unknown;
    label?: unknown;
    tabindex?: unknown;
    validateEvent?: unknown;
    inputStyle?: unknown;
    maxlength?: unknown;
} & {
    type: string;
    disabled: boolean;
    modelValue: string | number;
    autosize: AutosizeProp;
    autocomplete: string;
    form: string;
    readonly: boolean;
    clearable: boolean;
    showPassword: boolean;
    showWordLimit: boolean;
    suffixIcon: string;
    prefixIcon: string;
    validateEvent: boolean;
    inputStyle: Record<string, any>;
} & {
    size?: ComponentSize | undefined;
    resize?: "none" | "both" | "horizontal" | "vertical" | undefined;
    placeholder?: string | undefined;
    label?: string | undefined;
    tabindex?: string | number | undefined;
    maxlength?: string | number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onMouseleave?: ((...args: any[]) => any) | undefined;
    onMouseenter?: ((...args: any[]) => any) | undefined;
    onKeydown?: ((...args: any[]) => any) | undefined;
    onCompositionstart?: ((...args: any[]) => any) | undefined;
    onCompositionupdate?: ((...args: any[]) => any) | undefined;
    onCompositionend?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    disabled: boolean;
    modelValue: string | number;
    autosize: AutosizeProp;
    autocomplete: string;
    form: string;
    readonly: boolean;
    clearable: boolean;
    showPassword: boolean;
    showWordLimit: boolean;
    suffixIcon: string;
    prefixIcon: string;
    validateEvent: boolean;
    inputStyle: Record<string, any>;
}>;
export default _default;
