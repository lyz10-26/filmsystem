import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _ImageViewer: SFCWithInstall<import("vue").DefineComponent<{
    urlList: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    infinite: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnClickModal: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    index: import("vue").Ref<number>;
    wrapper: import("vue").Ref<null>;
    img: import("vue").Ref<null>;
    isSingle: import("vue").ComputedRef<boolean>;
    isFirst: import("vue").ComputedRef<boolean>;
    isLast: import("vue").ComputedRef<boolean>;
    currentImg: import("vue").ComputedRef<string>;
    imgStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    mode: import("vue").Ref<{
        name: string;
        icon: string;
    }>;
    handleActions: (action: import("./src/index.vue").ImageViewerAction, options?: {}) => void;
    prev: () => void;
    next: () => void;
    hide: () => void;
    toggleMode: () => void;
    handleImgLoad: () => void;
    handleImgError: (e: any) => void;
    handleMouseDown: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "switch")[], "close" | "switch", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    urlList?: unknown;
    zIndex?: unknown;
    initialIndex?: unknown;
    infinite?: unknown;
    hideOnClickModal?: unknown;
} & {
    zIndex: number;
    infinite: boolean;
    initialIndex: number;
    urlList: string[];
    hideOnClickModal: boolean;
} & {}> & {
    onClose?: ((...args: any[]) => any) | undefined;
    onSwitch?: ((...args: any[]) => any) | undefined;
}, {
    zIndex: number;
    infinite: boolean;
    initialIndex: number;
    urlList: string[];
    hideOnClickModal: boolean;
}>>;
export default _ImageViewer;
export declare const ElImageViewer: SFCWithInstall<import("vue").DefineComponent<{
    urlList: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    initialIndex: {
        type: NumberConstructor;
        default: number;
    };
    infinite: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnClickModal: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    index: import("vue").Ref<number>;
    wrapper: import("vue").Ref<null>;
    img: import("vue").Ref<null>;
    isSingle: import("vue").ComputedRef<boolean>;
    isFirst: import("vue").ComputedRef<boolean>;
    isLast: import("vue").ComputedRef<boolean>;
    currentImg: import("vue").ComputedRef<string>;
    imgStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    mode: import("vue").Ref<{
        name: string;
        icon: string;
    }>;
    handleActions: (action: import("./src/index.vue").ImageViewerAction, options?: {}) => void;
    prev: () => void;
    next: () => void;
    hide: () => void;
    toggleMode: () => void;
    handleImgLoad: () => void;
    handleImgError: (e: any) => void;
    handleMouseDown: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "switch")[], "close" | "switch", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    urlList?: unknown;
    zIndex?: unknown;
    initialIndex?: unknown;
    infinite?: unknown;
    hideOnClickModal?: unknown;
} & {
    zIndex: number;
    infinite: boolean;
    initialIndex: number;
    urlList: string[];
    hideOnClickModal: boolean;
} & {}> & {
    onClose?: ((...args: any[]) => any) | undefined;
    onSwitch?: ((...args: any[]) => any) | undefined;
}, {
    zIndex: number;
    infinite: boolean;
    initialIndex: number;
    urlList: string[];
    hideOnClickModal: boolean;
}>>;
